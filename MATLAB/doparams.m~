function ret = doparams(imgdir, imgpattern, gpbdir, outdir, pnames, allparams, allpexs)

%so all params has (number of parameters) columns, and (number of tests)
%rows, and each row is a parameter set


addpath('~/Documents/customgPb/globalPb/lib');
addpath('~/Documents/customgPb/gpb_src/matlab/junctions');

if ~exist(outdir, 'dir')
    mkdir(outdir);
end

interparams = {};

x = dir([imgdir, imgpattern]);
for i=1:numel(x)
    imgname = [imgdir, x(i).name];
    gpbname = [gpbdir, x(i).name, '.mat'];
    
    %do gpb unless it's already done
    if exist(gpbname, 'file')
        disp(['gpb already done for ', imgname]);
    else
        disp(['computing gpb for ', imgname]);
        [thin, gpb, mpb, spb, vect, maxo, thinmaxo] = globalPb(imgname);
        save(gpbname, 'thin', 'gpb', 'mpb', 'spb', 'vect', 'maxo', 'thinmaxo');
    end
    
    disp(['compiling pj for ', imgname]);
    for j = 1:size(allparams, 1)
        pjname = [outdir, x(i).name, '.', num2str(j), '.', params2text(params), '.mat'];
        interparams{end + 1} = ...
            {imgname, gpbname, allparams(j, :), allpexs(j, :), pjname}; %params for interpj
    end
end

disp(['Starting parallel run:']);
ret = dfeval(@interpj, interparams, 'Configuration', 'local');

paramsfile = fopen([outdir, 'params.txt'], 'w');
for j = 1:size(allparams, 1)
    fprintf(paramsfile, '=====Parameters %d\n', j);
    for i = 1:size(allparams, 2)
        fprintf(paramsfile, '%s: %d\n', pnames{i}, allparams(j, i));
    end
    fprintf(paramsfile, '\n\n');
end
fclose(paramsfile);

end




function ret = interpj(imgname, gpbname, params, pex, pjname)
    addpath('~/Documents/customgPb/globalPb/lib');
    addpath('~/Documents/customgPb/gpb_src/matlab/junctions');

    load(gpbname); %gives us gpb, thin, maxo, vect, etc
    img = im2double(imread(imgname));
    
    posimg = (pex(1) * thin) + (pex(2) * gpb);
    
    [pjs, angs, ests] = mex_pj_exp(img, posimg, thinmaxo, vect, params);
    save(pjname, 'pjs', 'angs', 'ests', 'params', 'pex');
    
    ret = 5;
end